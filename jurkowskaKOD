from datetime import datetime


def pow2(x):
    return pow(x, 2)


def sum_pow_digits(digits):
    return sum(map(pow2, map(int, digits)))


def iter_chain(start_number):
    number = start_number
    while True:
        number = sum_pow_digits(str(number))
        yield number


class LazyChainNumber:

    def __init__(self, start_number, cache):
        self.start_number = start_number
        self.cache = cache

    def ends_with(self, number):
        if self.start_number not in self.cache:
            self._update_cache()
        return self.cache[self.start_number] == number

    def _update_cache(self):
        for number in iter_chain(self.start_number):
            if number in self.cache:
                self.cache[self.start_number] = self.cache[number]
                break


class ChainNumberFactory:

    def __init__(self):
        self.cache = {1: 1, 89: 89}

    def create_lazy_chain(self, start_number):
        return LazyChainNumber(start_number, self.cache)


def how_many_ends_with(chains, expected_end):
    return len([c for c in chains if c.ends_with(expected_end)])


def generate_chains(start_values):
    factory = ChainNumberFactory()
    return (factory.create_lazy_chain(start) for start in start_values)


if __name__ == '__main__':
    started_at = datetime.now()
    chain_gen = generate_chains(range(1, 1000000))
    print(how_many_ends_with(chain_gen, expected_end=89))
